import ssl
# -----------
# while loops
# -----------
# while loops exist in python, dont use brackets for the body, use a ':' and indentations instead

a, b = 0, 1 # multiple declarations in a single line, assign a and b as 0 and 1, respectively
while a < 10:
    print(a, end=', ') # rather than make a newline after each print, we use end=', ' to put commas instead 
    a, b = b, a+b
print('\n')

# -------------
# if, elif, and else statements
# -------------
# if statements work the same way as in other languages, no brackets though
# and else if is shortened to elif
number = 10
if number > 10:
    print('number is greater than 10')
elif number == 10:
    print('number is 10')
elif number < 10:
    print('number is less than 10')
else: 
    print("What?")

# ---------
# for loops
# ---------
# Iterates over each item in the sequence in the order that they appear
# No need to define step and stop conditions
words = ['aaa', 'bbbbbbbbbb', 'ccccccccccccccccccccccccccccccccccccccccccccc']
for w in words:
    print(w, len(w))
# When working with a for loop that modifies the sequence it is iterating over, 
# it is better to loop over a copy or to make a new collection with the modified sequence

# ----------------
# range() function
# ----------------
# Generates arithmetic progressions
for i in range(5):
    print(i)
print('\n')
# range(n) gives a sequence of incrementing numbers, starting at 0 and ending before n

for i in range(5, 10):
    print(i)
print('\n')
# range(m, n) gives a sequence of incrementing numbers, starting at m and ending before n

for i in range(10, -10, -1):
    print(i)
print('\n')
# range(m, n, j) gives a sequence of numbers stepping by j, starting at m and ending before n 

# Can combine range() and len() to iterate over the indices of a sequence
a = ['what', 'the', 'flack']
for i in range(len(a)):
    print(i, a[i])
print('\n')
# enumerate() is more convenient, but that is for another time

# -------------------------------------------
# breaks and continues, else clauses in loops
# -------------------------------------------
# break clauses break out of the innermost loop that encloses it
# an else clause in a loop executes when:
#   a for loop has iterated through all item in the sequence
#   a while loop's condition becomes false
# does not execute when the loop is terminated by a break statement
for n in range(2, 10):
    for x in range(2, n):
        if n % x == 0:
            print(n, 'equals', x, '*', n//x)
            break
    else:
        # the above loop (second for loop) fell through to here 
        print(n, ' is a prime number')
print('\n')

# continue clauses continues with the next iteration of the loop 
for n in range(2, 10):
    if n % 2 == 0:
        print(n, ' is an even number')
        continue
    print(n, ' is an odd number')

# ---------------
# pass statements
# ---------------
# this statement does nothing. use when syntax is required, but no actions are needed
# useful for making stubs or empty functions and classes
for i in range(10):
    pass
def passedFunction(*args):
    pass
class Empty:
    pass

# -----------------
# match statements
# -----------------
# compares an expression to patterns given by case blocks
# think of it as a switch statement, but capable of taking the value's components
# and putting them into variables, does not use break statements
def ASDF(n):
    match n:
        case 1: 
            return "This is a 1"
        case 2: 
            return "This is a 2"
        case 3: 
            return "This is a 3"
        case 'a' | 'b' | 'c':
            return "This is either an a, b, or c"    
        case _:
            return "This is a default case, _. I always execute when no other cases match, if I am included as a case"
# If all cases fail, and no _ case is included, no branches are executed
# Can combine cases with a '|' operator

# -------------------
# Defining functions
# -------------------
# Uses keyword 'def' along with the function name and parameters
# returnResult is the name, and number is the function's parameter
def returnResult(number):
    """I am a docstring, or documentation string for short.
    
    Insert more description here (call convention, side effects, etc.).
    """
    if number > 0:
        print('returned 1') 
        return 1
    elif number == 0:
        print('returned 0')
        return 0
    else:
        print('error occured')
        return
# Docstrings are string literals in the first line of code.
# Use it to briefly describe the function's purpose. Make a habit of it.
# Further lines may describe other things, but separate it with a blank line

# A return clause by itself returns the 'None' value
# 'None' is also returned after falling off the end of a function

# To call the function, use this syntax
returnResult(1)

# Variables assigned a function for its value can make use of it
rR = returnResult
rR(1)
# OR
sS = returnResult(0)
sS

# A function can be given default arguments
def foo(bar, baz = 0, fol = 'asdf'):
    print(bar)
    print(baz)
    print(fol)
# bar is the only mandatory parameter to give, and as such
foo(120)
# specify arguments for the other parameters if needed
foo(240, 120)
foo(360, 240, '120asdf')
# Default values are evaulated at the time of its definition, and is
# only once, so be careful when setting a default to a mutable object

# Keyword arguments can be assigned to function parametes
def foo2(bar, baz = 0, fol = 'asdf'):
    print(bar)
    print(baz)
    print(fol)

# and calls to the function can assign arguments to specific 
# parameters explicitly
foo2(bar = 120) # keyword argument for bar; the same as foo2(120)

# foo2(120) assigns arguments positionally, meaning 120 will be assigned
# to the first parameter of the function, bar
# Positional arguments first, keyword arguments afterwards

# the following calls are invalid
# foo2() is missing required argument
# foo2(bar = 120, 240) has non-keyword argument after a keyword argument 
# foo2(120, bar = 240) arguments are writing to the same parameter
# foo2(asdf = 'hey') argument asdf is unknown

# functions may also use *name and **name arguments
# **name is a dictionary of all informal keywords arguments
# *arguments is a tuple containing all informal positional arguments
# formal arguments refers to the arguments as given explicitly
# by the function's parameter list. informal arguments are arguments that
# the function can take, but is not explicitly stated 

def asdf2(one, *args, **keys):
    print("Argument 'one': ", one)
    for a in args:
        print("I am", a, "in *args")
    for b in keys:
        print(b, ":", keys[b], "in **keys")
asdf2('Pizza', 'Cheese', 'Bacon', 'Black Olives', 
price = '$20.00', instructions='Smile and wave for the door camera pls')

#In general, a function could look like this
#def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):
#      -----------    ----------     ----------
#        |             |                  |
#        |        Positional or keyword   |
#        |                                - Keyword only
#         -- Positional only
# where everything after the / and * are optional
# Order matters in positional arguments, not so  in keyword arguments

# def standard(arg):           this is the standard function syntax
# def pos_only(pos_arg, /)         this is the positional args only syntax
# def Key_only(*, key_args)        this is the keyword args only syntax
# def combo(pos_args, /, standard, *, key_args) combined syntax

# Tip: the use of positional_only arguments can remove ambiguity between
# a parameter and a keyword 
# e.g: when 'one' is the parameter, and there exists a 'one' keyword arg

# Functions can also take an arbitrary number of arguments
# Examples of this are the *name tuple and **name dictionary (see above)
# Take note that all arguments after a *name arg are keyword args

# Functions that normally require separate positional arguments can 
# unpack collection arguments with a '*' operator for tuples or lists, 
# and a '**' operator for dictionaries
args = [0, 100]
list(range(*args))

args2 = {"arg1": 1, "arg2": 2, "arg3": 3}
def printer(arg1, arg2 = 99, arg3 = 1000):
    print('Jim ate', arg1, "pizza slices,", end=" ")
    print("while Tim ate", arg2, "pizza slices", end=" ")
    print("AND EXPLODED INTO", arg3, "TINY BITS!")
printer(**args2)

# The lambda keyword can be used in cases where you want to use a function
# without formally defining it
def multiplier(n):
    return lambda m: m * n
m = multiplier(2)
print(m(1))
print(m(10))
print(m(100))
# Limited to only a single expression. May be used to return a function
# or to pass to function parameters that take other functions

# ------------
# Coding Style
# ------------
# Use 4-space indentations, no tabs

# Wrap line so that they don't exceed 79 characters

# Use blank line to separate functions and classes, and larger blocks
# of code inside functions

# Put comments on lines of their own

# Use docstrings

# Use spaces around operators and after commas, but not directly inside
# brackets

# Consistenly name classes and functions. UpperCamelCase for classes and
# lowercase_with_underscores for functions and methods.

# No fancy encodings, and use non-ASCII characters in identifiers
# ONLY WHEN ABSOLUTELY NEEDED (otherwise dont use it at all)

