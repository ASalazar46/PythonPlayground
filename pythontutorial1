# Following the tutorial as seen on the official python 
# documents website: http://docs.python.org/3.10/tutorial
# Comments are made with '#' sign
# No need for code breaks like ';' in other languages 

# --------
# Numbers
# --------
2 + 2 # addition
2 - 2 # subtraction 
2 * 2 # multiplication
2 / 2 # division (gives float)
2 // 2 # division (gives floor of the quotient)
2 % 2 # division (gives remanider)
(2 * 2) / 2 # follows PEMDAS, I think

# Variable assignment
# No need for declaring variable types, use '=' for assignment
asdf = 1234

# The '_" operator stores the value of the last printed expression
# Only used when in the python command terminal and in interactive mode

# There are ints, floats, decimals, fractions, and support for imaginary numbers (j or J)

# -------
# Strings
# -------
'I am a string literal using single quotes.'
"I am a string literal using double quotes."
# Use apostrophes in sentences by escaping it with \'
' a\'s\'d\'f '
# Can also use \" to put double quotes
' \"Who?\" said the owl.'
# Use print() to produce an output more readable
sampleSentence = ' a\'s\'d\'f '
print(sampleSentence)

# Can make huge block sentences using """...""" or '''...'''
# A '\' can be placed at line ends to avoid making a new line
print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")

# Can be concatenated with '+' and repeated with '2 * string' where n is some number
sampleSentence = 'lol, u died. ' 
print(sampleSentence + 2*'lol, ' + 'u died')
# Two literals can be concatenated by placing them together without any operators
# Only works for literals, though
print('as''df')
print ('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
'HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHh')

# Strings have indices
# Going left to right, start with index 0
# Going right to left, start with index -1
sampleWord = 'asdf'
print(sampleWord[0]) # Should be a
print(sampleWord[1]) # Should be s
print(sampleWord[2]) # Should be d
print(sampleWord[3]) # Should be f
print(sampleWord[-1]) # Should be f
print(sampleWord[-2]) # Should be d
print(sampleWord[-3]) # Should be s
print(sampleWord[-4]) # Should be a

# Strings can also be sliced by string[x:y]
# If x is blank, then it defaults to index 0. If y is blank, then it default to the size of the string
# Sliced result includes x and everything after up until y (y is excluded)
print(sampleWord[0:2]) # Should be as
print(sampleWord[2:4]) # Should be df
# It is modeled like this so that string[:i] + string[i:] is equal to word

# Get the length of a string with len()
len(sampleWord)

# Strings are immutable (cannot be changed once declared). Make another string with the changes if you need to.

# ------
# Lists
# ------
# Kind of like an array, but it can hold multiple data types and can dynamically change in size
numbersList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numbersList)

# Can be indexed and sliced in the same way as strings
print(numbersList[0])
print(numbersList[-1])
print(numbersList[0:5])
print(numbersList[5:])

# Also supports concatenation
print(numbersList + [11, 12, 13, 14, 15])
# Appending also works
numbersList.append(16)

# Lists are mutable, able to have its contents and the size of the list changed
numbersList[0] = 999
print(numbersList)
numbersList[0] = 1
print(numbersList)

# Use list[x:y] = [] to remove the specified contents from the list
numbersList[6:] = []
print(numbersList) 

# len() gets the size of the lists, too
len(numbersList)

# Multidimensional lists also exist
a = [1, 2, 3]
b = ['a', 'b', 'c']
x = [a, b]
print(x[0][0]) # Should be 1
print(x[1][0]) # Should be 'a'